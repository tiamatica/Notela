:Class TracerProvider: ITracerProvider
    :Include Tools
⍝ Tracer Provider initialization

    :Field Private Instance _activeSpans
    :Field Private Instance _cfg
    :Field Private Instance _httpClt
    :Field Private Instance _threads
    :Field Private Instance _traces
    :Field Private Instance _resourceSpan

    ∇ make cfg;resource
      :Access Public
      :Implements Constructor
      ⎕RL←⍬ 1
      PS←(⊃⊃⎕CLASS ⎕THIS).##
      :If 9.2=⎕NC⊂'cfg'
      :AndIf PS.API.Configuration≡⊃⊃⎕CLASS cfg
          _cfg←cfg
      :Else
          'Constructor requires a Configuration instance'⎕SIGNAL 11
      :EndIf
      _activeSpans←⍬
      _threads←⍬
      _isShuttingDown←0
     
      _traces←⎕NS''
      _resourceSpan←_traces.⎕NS''
      _traces.resourceSpans←,_resourceSpan
      resource←_resourceSpan.(resource←⎕NS'')
      resource.attributes←toKeyValue/2 2⍴'service.name'_cfg.ServiceName'service.version'_cfg.ServiceVersion
      _resourceSpan.scopeSpans←⍬
     
      _httpClt←⎕NEW PS.HttpCommand
      _httpClt.Command←'post'
      _httpClt.URL←_cfg.OtelHttpUrlTraces
      _httpClt.ContentType←'application/json'
      ⍝
    ∇

    ∇ r←GetContext tracer;last
      :Implements Method ITracerProvider.GetContext
      ⍝ Returns Context
      :If 0=≢_activeSpans
          r←⍬
      :Else
          last←GetActiveSpan tracer
          r←last.Context
      :EndIf
    ∇

    ∇ r←GetActiveSpan tracer;threadSpans
      :Implements Method ITracerProvider.GetActiveSpan
  ⍝ Gets the span from the current context, if one exists.
      threadSpans←⎕TID tracer.scope{0∊⍴⍵:⍬ ⋄ (⍵.(Tid Scope)∊⊂⍺)/⍵}_activeSpans
      :If 0∊⍴threadSpans
          r←⍬
      :Else
          r←⊃⌽threadSpans
      :EndIf
    ∇

    ∇ span←{context}StartSpan args;parent;ind;traceId;parentId;spanId;name;create;scopeSpan
      :Implements Method ITracerProvider.StartSpan
      ⍝ Start span without setting it on context.
      ⍝ Create span and set start time
      ⍝ Create span with name in context.
      ⍝ If no context provided, create span in active span.
      ⍝ If no active span, create new root span.
      ⍝ Does not set the span as active (consider using StartActiveSpan for that).
      scopeSpan name←2↑args
     
      :If 2=⎕NC'context'
      :AndIf 2=⍴⍴context
          ind←(⎕C context[;1])⍳⊂'traceparent'
      :AndIf ind≤≢context
          (traceId parentId)←¯1↓1↓'-'(≠⊆⊢)⊃context[ind;2]
      :ElseIf ~0∊⍴parent←GetActiveSpan scopeSpan
          traceId←parent.TraceId
          parentId←parent.SpanId
      :Else
          traceId←RandomHex 32
          parentId←⊂'null'
      :EndIf
      spanId←RandomHex 16
     
      span←⎕NEW PS.Span(scopeSpan traceId parentId spanId name)
    ∇

    ∇ span←{context}StartActiveSpan args;currentSpan;row;list
      :Implements Method ITracerProvider.StartActiveSpan
 ⍝ Create span with name in active context.
 ⍝ If no active context, create new root span.
 ⍝ Sets the span as active.
      :If 0=⎕NC'context'
          span←StartSpan args
      :Else
          span←context StartSpan args
      :EndIf
      :Hold '_activeSpans'
          _activeSpans,←span
      :EndHold
    ∇

    ∇ End span;c;tracespans
      :Access Public Instance
    ⍝ End span then send it for further processing
      ProcessSpans 0
      :Hold '_activeSpans'
          _activeSpans~←span
      :EndHold
    ∇

    ∇ {r}←ProcessSpans flush;traces;spanBufferLength
 ⍝ Recieve spans for further processing
 ⍝ force = 1 to force flush of buffers
      :If flush∨~_isShuttingDown
          _threads←(_threads∊⎕TNUMS)/_threads
          spanBufferLength←+/≢¨_resourceSpan.scopeSpans.spans
          :If (flush∧0<spanBufferLength)∨(_cfg.BatchSize≤spanBufferLength)
              ⎕TSYNC _threads
              :Hold '_traces'
                  traces←⎕NS _traces
                  _resourceSpan.scopeSpans.spans←⊂⍬
              :EndHold
              _threads,←ExportSpans&traces
          :EndIf
          :If flush
              ⎕TSYNC _threads
          :EndIf
      :EndIf
      r←0
    ∇

    ∇ ExportSpans traces;scopeSpan;exporter;callspace;fn
⍝ Export to OTEL backend or log file
      :Trap _cfg.Debug↓0
          :If 0=≢_cfg.Exporters
              PostHttpJson traces
          :EndIf
          :For exporter :In _cfg.Exporters
              callspace fn←exporter
              (callspace⍎fn)traces
          :EndFor
      :Else
          LogError ⎕EN(↑⎕DM)
      :EndTrap
    ⍝
    ∇

    ∇ HousekeepThreads;leftover
      :Hold '_activeSpans'
          :If ~0∊⍴_activeSpans
          :AndIf ~0∊⍴leftover←(~_activeSpans.Tid∊⎕TNUMS)/_activeSpans
              _activeSpans~←leftover
          :EndIf
      :EndHold
    ∇

    ∇ PostHttpJson trace;res;ts
      _httpClt.Params←trace
      res←_httpClt.Run
      LogError(200≠⊃res.HttpStatus)'Failed posting trace'
    ∇

    ∇ LogError msg
      :If _cfg.Debug∧0≠⊃msg
          ⎕←msg
      :EndIf
    ∇

    ∇ r←GetTracer args;ind;name;version;scopeName;scopeVersion;attrs;scopeSpan
      :Implements Method ITracerProvider.GetTracer
      ⍝ args = ScopeName [ScopeVersion] [attributes]
      args←,⊆args
      args←args,(1=≢args)/⊂_cfg.ServiceVersion
      scopeName scopeVersion←2↑args
      attrs←toKeyValueMatrix 2↓args
      scopeSpan←_resourceSpan.⎕NS''
      scopeSpan.(scope←⎕NS'')
      scopeSpan.scope.(name version)←scopeName scopeVersion
      scopeSpan.scope.attributes←toKeyValue/attrs
      scopeSpan.spans←⍬
      _resourceSpan.scopeSpans,←scopeSpan
      r←⎕NEW PS.Tracer(,scopeSpan)
    ∇

    ∇ {r}←Shutdown
      :Implements Method ITracerProvider.Shutdown
      _isShuttingDown←1
      r←ProcessSpans 1
    ∇

    ∇ {r}←ForceFlush
      :Access Public Instance
      r←ProcessSpans 1
    ∇

    ∇ r←RandomHex size
      :Access Private Shared
      r←'0123456789ABCDEF'[size(?⍴)16]
    ∇

:EndClass
