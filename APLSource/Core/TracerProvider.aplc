:Class TracerProvider: ITracerProvider
    :Include Tools

    :Field Private Instance DEBUG←0
    :Field Private Instance _cfg
    :Field Private Instance _httpClt
    :Field Private Instance _threads
    :Field Private Instance _traces
    :Field Private Instance _resourceSpan
    :Field Private Instance _isShuttingDown

    ⍝ Tracer Provider initialization
    ∇ make cfg;resource
      :Access Public
      :Implements Constructor
      ⎕RL←⍬ 1
      PS←(⊃⊃⎕CLASS ⎕THIS).##
      _cfg←cfg
      DEBUG←cfg.Debug
      LOGLEVEL←cfg.LogLevel
      :Trap DEBUG↓0
          _threads←⍬
          _isShuttingDown←0
     
          _traces←⎕NS''
          _resourceSpan←_traces.⎕NS''
          _traces.resourceSpans←,_resourceSpan
          resource←_resourceSpan.(resource←⎕NS'')
          resource.attributes←toKeyValue/2 2⍴'service.name'_cfg.ServiceName'service.version'_cfg.ServiceVersion
          _resourceSpan.scopeSpans←⍬
     
          _httpClt←⎕NEW PS.HttpCommand
          _httpClt.Command←'post'
          _httpClt.URL←_cfg.OtelHttpUrlTraces
          _httpClt.ContentType←'application/json'
      :EndTrap
      ⍝
    ∇

    ∇ r←GetContext;last
      :Implements Method ITracerProvider.GetContext
     ⍝ Returns Context
      r←⍬
      :Trap DEBUG↓0
          last←PS.GetActiveSpan
          :If 1=≢last
              r←last.GetHttpContext
          :EndIf
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ r←GetActiveSpan
      :Implements Method ITracerProvider.GetActiveSpan
     ⍝ Gets the span from the current context, if one exists.
      r←⍬
      :Trap DEBUG↓0
          r←PS.GetActiveSpan
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ span←{context}StartSpan args;parent;ind;traceId;parentId;spanId;name;create;scopeSpan
      :Implements Method ITracerProvider.StartSpan
     ⍝ Start span without setting it on context.
     ⍝ Create span and set start time
     ⍝ Create span with name in context.
     ⍝ If no context provided, create span in active span.
     ⍝ If no active span, create new root span.
     ⍝ Does not set the span as active (consider using StartActiveSpan for that).
      :Trap DEBUG↓0
          scopeSpan name←2↑args
     
          :If 2=⎕NC'context'
          :AndIf 2=⍴⍴context
              ind←(⎕C context[;1])⍳⊂'traceparent'
          :AndIf ind≤≢context
              (traceId parentId)←¯1↓1↓'-'(≠⊆⊢)⊃context[ind;2]
          :ElseIf ~0∊⍴parent←PS.GetActiveSpan
              traceId←parent.TraceId
              parentId←parent.SpanId
          :Else
              traceId←RandomHex 32
              parentId←⊂'null'
          :EndIf
          spanId←RandomHex 16
     
          span←⎕NEW PS.Span(scopeSpan traceId parentId spanId name DEBUG)
      :Else
          LogError ⎕EN ⎕DM
          span←⎕NEW PS.Span(⍬'' '' '' '' DEBUG)
      :EndTrap
    ∇

    ∇ span←{context}StartActiveSpan args;currentSpan;row;list
      :Implements Method ITracerProvider.StartActiveSpan
     ⍝ Create span with name in active context.
     ⍝ If no active context, create new root span.
     ⍝ Sets the span as active.
      :Trap DEBUG↓0
          :If 0=⎕NC'context'
              span←StartSpan args
          :Else
              span←context StartSpan args
          :EndIf
          PS.SetActiveSpan span
      :Else
          LogError ⎕EN ⎕DM
          span←⎕NEW PS.Span(⍬'' '' '' '' DEBUG)
      :EndTrap
    ∇

    ∇ End span;c;tracespans
      :Access Public Instance
     ⍝ Ended span is sent for further processing
      :Trap DEBUG↓0
          ProcessSpans 0
          PS.RemoveActiveSpan span
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ {r}←ProcessSpans flush;traces;spanBufferLength
     ⍝ Recieve spans for further processing
     ⍝ force = 1 to force flush of buffers
      :If flush∨~_isShuttingDown
      :AndIf 0≠⍴_resourceSpan.scopeSpans
          _threads←(_threads∊⎕TNUMS)/_threads
          spanBufferLength←+/≢¨_resourceSpan.scopeSpans.spans
          :If (flush∧0<spanBufferLength)∨(_cfg.BatchSize≤spanBufferLength)
              ⎕TSYNC _threads
              :Hold '_traces'
                  traces←⎕NS _traces
                  _resourceSpan.scopeSpans.spans←⊂⍬
              :EndHold
              _threads,←ExportSpans&traces
          :EndIf
          :If flush
              ⎕TSYNC _threads
          :EndIf
      :EndIf
      r←0
    ∇

    ∇ ExportSpans traces;scopeSpan;exporter;callspace;fn
     ⍝ Export to OTEL backend or log file
      :Trap DEBUG↓0
          :If 0=≢_cfg.Exporters
              PostHttpJson traces
          :EndIf
          :For exporter :In _cfg.Exporters
              callspace fn←exporter
              (callspace⍎fn)traces
          :EndFor
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ⍝
    ∇

    ∇ PostHttpJson trace;res;ts
      :Hold 'httpPostTrace'
          _httpClt.Params←trace
          res←_httpClt.Run
      :EndHold
      LogError(200≠⊃res.HttpStatus)'Failed posting trace'
    ∇

    ∇ LogError msg
      :If DEBUG∧0≠⊃msg
          ⎕←msg
      :EndIf
    ∇

    ∇ r←GetTracer args;ind;name;version;scopeName;scopeVersion;attrs;scopeSpan
      :Implements Method ITracerProvider.GetTracer
      ⍝ args = ScopeName [ScopeVersion] [attributes]
      :Trap DEBUG↓0
          args←,⊆args
          args←args,(1=≢args)/⊂_cfg.ServiceVersion
          scopeName scopeVersion←2↑args
          attrs←toKeyValueMatrix 2↓args
          scopeSpan←_resourceSpan.⎕NS''
          scopeSpan.(scope←⎕NS'')
          scopeSpan.scope.(name version)←scopeName scopeVersion
          scopeSpan.scope.attributes←toKeyValue/attrs
          scopeSpan.spans←⍬
          _resourceSpan.scopeSpans,←scopeSpan
          r←⎕NEW PS.Tracer(,scopeSpan)
      :Else
          LogError ⎕EN ⎕DM
          r←⎕NEW PS.TracerNOP
      :EndTrap
    ∇

    ∇ {r}←Shutdown
      :Implements Method ITracerProvider.Shutdown
      r←1
      :Trap DEBUG↓0
          _isShuttingDown←1
          r←ProcessSpans 1
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ {r}←ForceFlush
      :Implements Method ITracerProvider.ForceFlush
      r←1
      :Trap DEBUG↓0
          r←ProcessSpans 1
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ r←RandomHex size
      :Access Private Shared
      r←'0123456789ABCDEF'[size(?⍴)16]
    ∇

:EndClass
