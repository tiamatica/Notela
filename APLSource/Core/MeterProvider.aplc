:Class MeterProvider: IMeterProvider
    :Include Tools

    :Field Private Instance _cfg←⍬
    :Field Private Instance _httpClt
    :Field Private Instance _instruments←⍬
    :Field Private Instance _metrics←⍬

    ∇ make cfg;handler;ind;name;version;resource
      :Access Public
      :Implements Constructor
    ⍝ cfg = Configuration instance
      PS←(⊃⊃⎕CLASS ⎕THIS).##
      :If 9.2=⎕NC⊂'cfg'
      :AndIf PS.API.Configuration≡⊃⊃⎕CLASS cfg
          _cfg←cfg
      :Else
          'Requires a Configuration instance'⎕SIGNAL 11
      :EndIf
      handler←(⍕⊃⊃⎕CLASS ⎕THIS),'.OnTimer'
     
      _metrics←⎕NS''
      _resourceMetric←_metrics.⎕NS''
      _metrics.resourceMetrics←,_resourceMetric
      resource←_resourceMetric.(resource←⎕NS'')
      resource.attributes←toKeyValue/2 2⍴'service.name'_cfg.ServiceName'service.version'_cfg.ServiceVersion
      _resourceMetric.scopeMetrics←⍬
     
      _httpClt←⎕NEW PS.HttpCommand
      _httpClt.Command←'post'
      _httpClt.URL←_cfg.OtelHttpUrlMetrics
      _httpClt.ContentType←'application/json'
    ∇

    ∇ r←GetMeter args;ind;scopeName;scopeVersion;attrs;scopeMetric
      :Implements Method IMeterProvider.GetMeter
      ⍝ args = ScopeName [ScopeVersion] [attributes]
      args←,⊆args
      args←args,(1=≢args)/⊂_cfg.ServiceVersion
      scopeName scopeVersion←2↑args
      attrs←toKeyValueMatrix 2↓args
      scopeMetric←⎕NS''
      scopeMetric.scope←⎕NS''
      scopeMetric.scope.(name version)←scopeName scopeVersion
      scopeMetric.scope.attributes←,'my.scope.attribute'toKeyValue'some scope attribute'
      scopeMetric.metrics←⍬
      _resourceMetric.scopeMetrics,←scopeMetric
      r←⎕NEW PS.Meter(,scopeMetric)
    ∇

    ∇ {r}←Shutdown
      :Implements Method IMeterProvider.Shutdown
      ⎕EX'_timer'
      r←ForceFlush
      _instruments←⍬
    ∇

    ∇ r←ForceFlush
      :Implements Method IMeterProvider.ForceFlush
      ExportMeters
      r←0
    ∇

    ∇ instrument←CreateCounter(scopeMetric args)
      :Access Public Instance
      instrument←⎕NEW PS.Counter(scopeMetric args)
      _instruments,←instrument
    ∇

    ∇ instrument←CreateGauge(scopeMetric args)
      :Access Public Instance
      instrument←⎕NEW PS.Gauge(scopeMetric args)
      _instruments,←instrument
    ∇

    ∇ instrument←CreateHistogram(scopeMetric args)
      :Access Public Instance
      instrument←⎕NEW PS.Histogram(scopeMetric args)
      _instruments,←instrument
    ∇

    ∇ Collect
      :Access Public Instance
      :If 0<≢_instruments
          ExportMeters _instruments
      :EndIf
    ∇

    ∇ ExportMeters;callspace;exporter;fn;rs;scopeMetric;scopeSpan
      :Access Public Instance
    ⍝ Export to OTEL backend or log file
      :If 0=≢_instruments
          :Return
      :EndIf
      :Trap _cfg.Debug↓0
          _instruments.Collect
          :If 0=≢_cfg.Exporters
              PostHttpJson _metrics
          :EndIf
          :For exporter :In _cfg.Exporters
              callspace fn←exporter
              (callspace⍎fn)_metrics
          :EndFor
          _instruments.Clear
      :EndTrap
    ⍝
    ∇

    ∇ r←Meters
      :Access Public Instance
    ⍝ Return all meters
      r←_instruments
    ∇

    ∇ PostHttpJson metrics;res
      _httpClt.Params←metrics
      res←_httpClt.Run
      LogError(200≠⊃res.HttpStatus)'Failed posting metric'
    ∇

    ∇ LogError msg
      :If _cfg.Debug∧0≠⊃msg
          ⎕←1↓msg
      :EndIf
    ∇

:EndClass
