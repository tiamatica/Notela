:Class MeterProvider: IMeterProvider
    :Include Tools

    :Field Private Instance DEBUG←0
    :Field Private Instance _cfg←⍬
    :Field Private Instance _httpClt
    :Field Private Instance _instruments←⍬
    :Field Private Instance _metrics←⍬
    :Field Private Instance _exportedTime
    :Field Private Instance _bufferLength
    :Field Private Instance _isShuttingDown

    ∇ make cfg;ind;name;version;resource
      :Access Public
      :Implements Constructor
    ⍝ cfg = Configuration instance
      PS←(⊃⊃⎕CLASS ⎕THIS).##
      _cfg←cfg
      DEBUG←cfg.Debug
      _exportedTime←3⊃⎕AI
      _bufferLength←0
      _isShuttingDown←0
     
      _metrics←⎕NS''
      _resourceMetric←_metrics.⎕NS''
      _metrics.resourceMetrics←,_resourceMetric
      resource←_resourceMetric.(resource←⎕NS'')
      resource.attributes←toKeyValue/2 2⍴'service.name'_cfg.ServiceName'service.version'_cfg.ServiceVersion
      _resourceMetric.scopeMetrics←⍬
     
      _httpClt←⎕NEW PS.HttpCommand
      _httpClt.Command←'post'
      _httpClt.URL←_cfg.OtelHttpUrlMetrics
      _httpClt.ContentType←'application/json'
    ∇

    ∇ r←GetMeter args;ind;scopeName;scopeVersion;attrs;scopeMetric
      :Implements Method IMeterProvider.GetMeter
     ⍝ args = ScopeName [ScopeVersion] [attributes]
      :Trap DEBUG↓0
          args←,⊆args
          args←args,(1=≢args)/⊂_cfg.ServiceVersion
          scopeName scopeVersion←2↑args
          attrs←toKeyValueMatrix 2↓args
          scopeMetric←_resourceMetric.⎕NS''
          scopeMetric.(scope←⎕NS'')
          scopeMetric.scope.(name version)←scopeName scopeVersion
          scopeMetric.scope.attributes←toKeyValue/attrs
          scopeMetric.metrics←⍬
          _resourceMetric.scopeMetrics,←scopeMetric
          r←⎕NEW PS.Meter(,scopeMetric)
      :Else
          LogError ⎕EN ⎕DM
          r←⎕NEW PS.MeterNOP
      :EndTrap
    ∇

    ∇ {r}←Shutdown
      :Implements Method IMeterProvider.Shutdown
      r←1
      :Trap DEBUG↓0
          _isShuttingDown←1
          r←ForceFlush
          _instruments←⍬
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ {r}←ForceFlush
      :Implements Method IMeterProvider.ForceFlush
      r←1
      :Trap DEBUG↓0
          ExportMetrics 1
          r←0
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ instrument←CreateCounter(scopeMetric args);metric
      :Implements Method IMeterProvider.CreateCounter
      :Trap DEBUG↓0
          metric←scopeMetric.⎕NS''
          instrument←⎕NEW PS.Counter(metric args DEBUG)
          scopeMetric.metrics,←metric
          _instruments,←instrument
      :Else
          LogError ⎕EN ⎕DM
          instrument←⎕NEW PS.InstrumentNOP
      :EndTrap
    ∇

    ∇ instrument←CreateGauge(scopeMetric args);metric
      :Implements Method IMeterProvider.CreateGauge
      :Trap DEBUG↓0
          metric←scopeMetric.⎕NS''
          instrument←⎕NEW PS.Gauge(metric args DEBUG)
          scopeMetric.metrics,←metric
          _instruments,←instrument
      :Else
          LogError ⎕EN ⎕DM
          instrument←⎕NEW PS.InstrumentNOP
      :EndTrap
    ∇

    ∇ instrument←CreateHistogram(scopeMetric args);metric
      :Implements Method IMeterProvider.CreateHistogram
      :Trap DEBUG↓0
          metric←scopeMetric.⎕NS''
          instrument←⎕NEW PS.Histogram(metric args DEBUG)
          scopeMetric.metrics,←metric
          _instruments,←instrument
      :Else
          LogError ⎕EN ⎕DM
          instrument←⎕NEW PS.InstrumentNOP
      :EndTrap
    ∇

    ∇ ProcessMetrics
      :Access Public Instance
      :Trap DEBUG↓0
          _bufferLength+←1
          ExportMetrics 0
      :Else
          LogError ⎕EN ⎕DM
      :EndTrap
    ∇

    ∇ ExportMetrics flush;callspace;exporter;fn;rs;scopeMetric;scopeSpan
      ⍝ Export metrics for further processing such as batching, sampling and/or enrichment
      ⍝ flush = 1 to force flush buffered meters
      :If 0=≢_instruments
          :Return
      :EndIf
      :If flush∧0<_bufferLength
      :OrIf (~_isShuttingDown)∧(_cfg.BatchSize≤_bufferLength)∧(_cfg.ExportInterval≤(3⊃⎕AI)-_exportedTime)
          _instruments.Collect
          :If 0=≢_cfg.Exporters
              PostHttpJson _metrics
          :EndIf
          :For exporter :In _cfg.Exporters
              callspace fn←exporter
              (callspace⍎fn)_metrics
          :EndFor
          _instruments.Clear
          _exportedTime←3⊃⎕AI
          _bufferLength←0
      :EndIf
    ⍝
    ∇

    ∇ PostHttpJson metrics;res
      :Hold 'httpPostMeter'
          _httpClt.Params←metrics
          res←_httpClt.Run
      :EndHold
      LogError(200≠⊃res.HttpStatus)'Failed posting metric'
    ∇

    ∇ LogError msg
      :If DEBUG∧0≠⊃msg
          ⎕←1↓msg
      :EndIf
    ∇

:EndClass
