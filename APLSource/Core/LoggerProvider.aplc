:Class LoggerProvider: ILoggerProvider
    :Include Tools
    ⍝ Logger Provider initialization
    :Field Private Instance _cfg
    :Field Private Instance _httpClt
    :Field Private Instance _logs
    :Field Private Instance _resourceLog
    :Field Private Instance _isShuttingDown

    ∇ make cfg;resource
      :Access Public
      :Implements Constructor
      ⎕RL←⍬ 1
      PS←(⊃⊃⎕CLASS ⎕THIS).##
      :If 9.2=⎕NC⊂'cfg'
      :AndIf PS.API.Configuration≡⊃⊃⎕CLASS cfg
          _cfg←cfg
      :Else
          'Constructor requires a Configuration instance'⎕SIGNAL 11
      :EndIf
      _logs←⎕NS''
      _resourceLog←_logs.⎕NS''
      _logs.resourceLogs←,_resourceLog
      resource←_resourceLog.(resource←⎕NS'')
      resource.attributes←toKeyValue/2 2⍴'service.name'_cfg.ServiceName'service.version'_cfg.ServiceVersion
      _resourceLog.scopeLogs←⍬
      _isShuttingDown←0
      _httpClt←⎕NEW PS.HttpCommand
      _httpClt.Command←'post'
      _httpClt.URL←_cfg.OtelHttpUrlLogs
      _httpClt.ContentType←'application/json'

    ∇

    ∇ r←GetLogger args;ind;name;version;scopeName;scopeVersion;scopeLog;attrs
      :Implements Method ILoggerProvider.GetLogger
      ⍝ args = ScopeName [ScopeVersion] [attributes]
      args←,⊆args
      args←args,(1=≢args)/⊂_cfg.ServiceVersion
      scopeName scopeVersion←2↑args
      attrs←toKeyValueMatrix 2↓args
      scopeLog←_resourceLog.⎕NS''
      scopeLog.(scope←⎕NS'')
      scopeLog.scope.(name version)←scopeName scopeVersion
      scopeLog.scope.attributes←toKeyValue/attrs
      scopeLog.logRecords←⍬
      _resourceLog.scopeLogs,←scopeLog
      r←⎕NEW PS.Logger(,scopeLog)
    ∇

    ∇ scope Log args;attrs;body;log;severity;span;spanId;traceId;tracer
      :Implements Method ILoggerProvider.Log
      args,←(≢args)↓(PS.API.LogSeverity.INFO'')''
      severity body←2↑args
      attrs←toKeyValueMatrix 2↓args
      severity←2↑severity,⊂''
      log←scope.⎕NS''
      log.spanId←''
      log.traceId←''
      log.body←toAnyValue body
      log.timeUnixNano←timeUnixNano 0
      log.attributes←toKeyValue/attrs
      log.severityNumber←1⊃severity
      log.severityText←2⊃severity
     
      tracer←PS.GetTracer''
      span←tracer.GetActiveSpan
      :If 0<≢span
          log.(traceId spanId)←span.(TraceId SpanId)
      :EndIf
      :Hold '_logs'
          scope.logRecords,←log
      :EndHold
      ProcessLogs 0
    ∇

    ∇ {r}←ProcessLogs flush;bufferLength;logs
      ⍝ Recieve logs for further processing such as batching, sampling and/or enrichment
      ⍝ flush = 1 to force flush buffered logs
      :If flush∨~_isShuttingDown 
      :AndIf 0≠⍴_resourceLog.scopeLogs
          bufferLength←+/≢¨_resourceLog.scopeLogs.logRecords
      :AndIf (flush∧0<bufferLength)∨(_cfg.BatchSize≤bufferLength)
          :Hold '_logs'
              logs←⎕NS _logs
              _resourceLog.scopeLogs.logRecords←⊂⍬
          :EndHold
          ExportLogs&logs
      :EndIf
      r←0
    ∇

    ∇ {r}←ExportLogs logs;scopeLog;logR;attr;exporter;callspace;fn
⍝ Export to OTEL backend or log file
      :Trap _cfg.Debug↓0
          :If 0=≢_cfg.Exporters
              PostHttpJson logs
          :EndIf
          :For exporter :In _cfg.Exporters
              callspace fn←exporter
              (callspace⍎fn)logs
          :EndFor
      :Else
          LogError ⎕EN(↑⎕DM)
      :EndTrap
    ⍝
    ∇

    ∇ PostHttpJson logs;res;ts
      :Hold 'httpPostLog'
          _httpClt.Params←logs
          res←_httpClt.Run
      :EndHold
      LogError(200≠⊃res.HttpStatus)'Failed posting logs'
    ∇

    ∇ LogError msg
      :If _cfg.Debug∧0≠⊃msg
          ⎕←msg
      :EndIf
    ∇

    ∇ {r}←Shutdown
      :Implements Method ILoggerProvider.Shutdown
      _isShuttingDown←1 
      r←ProcessLogs 1 
    ∇

    ∇ {r}←ForceFlush
      :Access Public Instance
      r←ProcessLogs 1
    ∇


:EndClass
