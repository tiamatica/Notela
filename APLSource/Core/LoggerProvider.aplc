:Class LoggerProvider: ILoggerProvider
    :Include Tools

    :Field Private Instance _cfgDebug←0
    :Field Private Instance _cfgBatchSize
    :Field Private Instance _cfgExporters
    :Field Private Instance _cfgLoggers
    :Field Private Instance _cfgLogLevel
    :Field Private Instance _cfgServiceName
    :Field Private Instance _cfgServiceVersion

    :Field Private Instance _httpClt
    :Field Private Instance _logs
    :Field Private Instance _resourceLog
    :Field Private Instance _isShuttingDown

    :Field Private Shared PS←##

    ⍝ Logger Provider initialization
    ∇ make cfg;resource
      :Access Public
      :Implements Constructor
      ⎕RL←⍬ 1
      _cfgDebug←cfg.Debug
      _cfgBatchSize←cfg.BatchSize
      _cfgExporters←cfg.Exporters
      _cfgLoggers←cfg.Loggers
      _cfgLogLevel←cfg.LogLevel
      _cfgServiceName←cfg.ServiceName
      _cfgServiceVersion←cfg.ServiceVersion
     
      :Trap _cfgDebug↓0
          _logs←⎕NS''
          _resourceLog←_logs.⎕NS''
          _logs.resourceLogs←,_resourceLog
          resource←_resourceLog.(resource←⎕NS'')
          resource.attributes←toKeyValue/2 2⍴'service.name'_cfgServiceName'service.version'_cfgServiceVersion
          _resourceLog.scopeLogs←⍬
          _isShuttingDown←0
          _httpClt←⎕NEW PS.HttpCommand
          _httpClt.Command←'post'
          _httpClt.URL←cfg.OtelHttpUrlLogs
          _httpClt.ContentType←'application/json'
      :EndTrap
     ⍝
    ∇

    ∇ r←GetLogger args;ind;name;version;scopeName;scopeVersion;scopeLog;attrs
      :Implements Method ILoggerProvider.GetLogger
      ⍝ args = ScopeName [ScopeVersion] [attributes]
      :Trap _cfgDebug↓0
          :If 0=≢args
              scopeName scopeVersion←_cfgServiceName _cfgServiceVersion
              attrs←0 2⍴⊂''
          :Else
              args←,⊆args
              args←args,(1=≢args)/⊂''
              scopeName scopeVersion←2↑args
              attrs←checkAttributes toKeyValueMatrix 2↓args
          :EndIf
          scopeLog←_resourceLog.⎕NS''
          scopeLog.(scope←⎕NS'')
          scopeLog.scope.(name version)←scopeName scopeVersion
          scopeLog.scope.attributes←toKeyValue/attrs
          scopeLog.logRecords←⍬
          _resourceLog.scopeLogs,←scopeLog
          r←⎕NEW PS.Logger(scopeLog _cfgDebug)
      :Else
          logError
          r←⎕NEW PS.LoggerNOP
      :EndTrap
    ∇

    ∇ scope Log args;attrs;body;log;severity;span;spanId;traceId
      :Implements Method ILoggerProvider.Log
      :Trap _cfgDebug↓0
          args,←(≢args)↓(PS.API.LogSeverity.INFO'')''
          severity body←2↑args
          attrs←checkAttributes toKeyValueMatrix 2↓args
          severity←2↑severity,⊂''
          log←scope.⎕NS''
          log.spanId←''
          log.traceId←''
          log.body←toAnyValue body
          log.timeUnixNano←timeUnixNano 0
          log.attributes←toKeyValue/attrs
          log.severityNumber←1⊃severity
          log.severityText←2⊃severity
     
          span←PS.GetActiveSpan
          :If 0<≢span
              log.(traceId spanId)←span.(traceId spanId)
          :EndIf
          :Hold '_logs'
              scope.logRecords,←log
          :EndHold
          ProcessLogs 0
      :Else
          logError
      :EndTrap
    ∇

    ∇ {r}←ProcessLogs flush;bufferLength;logs
      ⍝ Recieve logs for further processing such as batching, sampling and/or enrichment
      ⍝ flush = 1 to force flush buffered logs
      :If flush∨~_isShuttingDown
      :AndIf 0≠⍴_resourceLog.scopeLogs
          bufferLength←+/≢¨_resourceLog.scopeLogs.logRecords
      :AndIf (flush∧0<bufferLength)∨(_cfgBatchSize≤bufferLength)
          :Hold '_logs'
              logs←⎕JSON _logs
              _resourceLog.scopeLogs.logRecords←⊂⍬
          :EndHold
          ExportLogs&logs
      :EndIf
      r←0
    ∇

    ∇ {r}←ExportLogs logs;scopeLog;logR;attr;exporter;callspace;fn
     ⍝ Export to OTEL backend or log file
      :Trap _cfgDebug↓0
          :If 0=≢_cfgExporters
              PostHttpJson logs
          :EndIf
          :For exporter :In _cfgExporters
              callspace fn←exporter
              (callspace⍎fn)logs
          :EndFor
      :Else
          logError
      :EndTrap
    ⍝
    ∇

    ∇ PostHttpJson logs;res;ts
      :Hold 'httpPostLog'
          _httpClt.Params←logs
          res←_httpClt.Run
      :EndHold
      :If ~res.IsOK
          1 logMessage'Failed posting log'
      :EndIf
    ∇

    ∇ {r}←Shutdown
      :Implements Method ILoggerProvider.Shutdown
      r←1
      :Trap _cfgDebug↓0
          _isShuttingDown←1
          r←ProcessLogs 1
      :Else
          logError
      :EndTrap
    ∇

    ∇ {r}←ForceFlush
      :Access Public Instance
      r←1
      :Trap _cfgDebug↓0
          r←ProcessLogs 1
      :Else
          logError
      :EndTrap
    ∇

:EndClass
