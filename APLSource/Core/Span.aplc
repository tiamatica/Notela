:Class Span
    :Include Tools

    :Field Private Instance _cfgDebug←0
    :Field Private Instance _cfgLoggers←⍬
    :Field Private Instance _cfgLogLevel←0
    :Field Public Instance name←''
    :Field Public Instance spanId←''
    :Field Public Instance traceId←''
    :Field Private Instance _parentSpanId←''
    :Field Private Instance _startTime←0
    :Field Private Instance _endTime←0
    :Field Private Instance _kind←1              ⍝ PS.API.SpanKind.INTERNAL
    :Field Private Instance _statusCode←0        ⍝ PS.API.SpanStatusCode.UNSET
    :Field Private Instance _statusMessage←''
    :Field Private Instance _attributes←0 2⍴⊂''

    :Field Private Instance events←⍬
   ⍝ An n-element array with events. Each element
   ⍝ contains an Event name and Event attribute.

    :Field Private Instance links←⍬
    :Field Private Instance isEnded←0
    :Field Private Instance scopeSpan←⍬

    :Field Private Shared PS←##

    ∇ make args
      :Access Public
      :Implements Constructor
      isEnded←0=≢⊃args
      →isEnded/0
      (scopeSpan traceId _parentSpanId spanId name _cfgDebug _cfgLogLevel _cfgLoggers)←args
      _startTime←timeUnixNano 0
      ⍝
    ∇

    :Property Simple kind
    :Access Public
        ∇ r←get ipa
          r←_kind
        ∇
        ∇ set ipa
          →isEnded/0
          :Trap _cfgDebug↓0
              :If (⊂ipa.NewValue)∊PS.API.SpanKind.(UNSPECIFIED INTERNAL SERVER CLIENT PRODUCER CONSUMER)
                  _kind←ipa.NewValue
              :Else
                  2 logMessage'Ignored invalid kind: ',⍕ipa.NewValue
              :EndIf
          :Else
              logError
          :EndTrap
        ∇
    :EndProperty

    :Property Simple statusCode
    :Access Public
        ∇ r←get ipa
          r←_statusCode
        ∇
        ∇ set ipa
          →isEnded/0
          :Trap _cfgDebug↓0
              :If (⊂ipa.NewValue)∊PS.API.SpanStatusCode.(OK ERROR)
                  _statusCode←ipa.NewValue
              :Else
                  2 logMessage'Ignored invalid status code: ',⍕ipa.NewValue
              :EndIf
          :Else
              logError
          :EndTrap
        ∇
    :EndProperty

    :Property Simple statusMessage
    :Access Public
        ∇ r←get ipa
          r←_statusMessage
        ∇
        ∇ set ipa
          →isEnded/0
          :Trap _cfgDebug↓0
              :If 0=10|⎕DR ipa.NewValue
              :AndIf 1=≡ipa.NewValue
                  _statusMessage←ipa.NewValue
              :Else
                  2 logMessage'Ignored invalid status message: ',⍕ipa.NewValue
              :EndIf
          :Else
              logError
          :EndTrap
        ∇
    :EndProperty

    ∇ AddEvent args;attrm;r
      :Access Public
     ⍝ Add a Span Event
     ⍝ args, vov: EventName [attributes]
     ⍝ attributes as Key/value pairs
      :Trap _cfgDebug↓0
          args←,⊆args
          attrm←checkAttributes toKeyValueMatrix 1↓args
          r←⎕NS''
          r.name←⊃args
          r.timeUnixNano←timeUnixNano 0
          r.attributes←toKeyValue/attrm
         ⍝r.message←val
          events,←r
      :Else
          logError
      :EndTrap
    ∇

    ∇ AddLink args;attrm;r;span
      :Access Public
     ⍝ Add a link to another Span
     ⍝ args, vov: Span [attributes]
     ⍝ attributes as Key/value pairs
      :Trap _cfgDebug↓0
          args←,⊆args
          span←⊃args
          r←⎕NS''
          r.traceId←span.traceId
          r.spanId←span.spanId
          r.traceState←''
          attrm←checkAttributes toKeyValueMatrix 1↓args
          r.attributes←toKeyValue/attrm
          links,←r
      :Else
          logError
      :EndTrap
      ⍝
    ∇


    ∇ r←GetHttpContext
      :Access Public
     ⍝ Returns the context (HTTP header) associated with this Span.
      r←0 2⍴⊂''
      :Trap _cfgDebug↓0
          r←1 2⍴'traceparent'('00-',traceId,'-',spanId,'-01')
         ⍝r⍪←'tracecontext' ''
      :Else
          logError
      :EndTrap
    ∇

    ∇ r←GetAttribute attr;lookup
      :Access Public
     ⍝ Get a single Attribute with the
     ⍝ key passed as argument.
     ⍝ attr, cv: attribute key
     ⍝ Return, Attribute value
      r←''
      :Trap _cfgDebug↓0
          lookup←_attributes[;1]⍳⊆attr
          :If lookup≤≢_attributes
              r←⊃_attributes[lookup;2]
          :Else
              2 LogMessage'Attribute [',attr,'] not found'
          :EndIf
      :Else
          logError
      :EndTrap
    ∇

    ∇ SetAttributes attrs;attrm
      :Access Public
     ⍝ Sets Attributes to the Span
     ⍝ ra, nv: 2-elements key val pairs
      :Trap _cfgDebug↓0
          attrm←toKeyValueMatrix attrs
          _attributes←checkAttributes _attributes⍪attrm
      :Else
          logError
      :EndTrap
    ∇

    ∇ End;r
      :Access Public
     ⍝ Marks the end of Span execution.
      →isEnded/0
      :Trap _cfgDebug↓0
          _endTime←timeUnixNano 0
          isEnded←1
     
          r←scopeSpan.⎕NS''
          r.name←name
          r.traceId←traceId
          r.parentSpanId←_parentSpanId
          r.spanId←spanId
          r.startTimeUnixNano←_startTime
          r.endTimeUnixNano←_endTime
          r.kind←_kind
          r.attributes←toKeyValue/_attributes
          r.events←events
          r.links←links
          r.status←r.⎕NS''
          r.status.code←_statusCode
          r.status.message←_statusMessage
          scopeSpan.spans,←r
          ##.End ⎕THIS
      :Else
          logError
      :EndTrap
    ∇

:EndClass
