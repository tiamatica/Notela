:Class Span
    :Include Tools

    :Field Private Instance name
    :Field Private Instance traceId
    :Field Private Instance parentSpanId
    :Field Private Instance spanId
    :Field Private Instance startTime
    :Field Private Instance endTime
    :Field Private Instance kind
    :Field Private Instance attributes

    :Field Private Instance events
   ⍝ An n-element array with events. Each element
   ⍝ contains an Event name and Event attribute.

    :Field Private Instance links
    :Field Private Instance isEnded
    :Field Private Instance statusCode
    :Field Private Instance statusMessage
    :Field Private Instance tid
    :Field Private Instance scopeSpan

    ∇ make context
      :Access Public
      :Implements Constructor
      PS←(⊃⊃⎕CLASS ⎕THIS).##
      :If {0::1 ⋄ ~PS.ITracerProvider∊⊃⎕CLASS ⍵}⊃⎕RSI
          isEnded←1
          'Spans must be created from tracer'⎕SIGNAL 982
      :EndIf
      isEnded←PS.TracerProviderNOP≡⊃⊃⎕CLASS⊃⎕RSI
     
      (scopeSpan traceId parentSpanId spanId name)←context
     
      startTime←Now
      endTime←0
      kind←PS.API.SpanKind.INTERNAL
      attributes←0 2⍴⊂''
      events←⍬
      links←⍬
      statusCode←PS.API.SpanStatusCode.UNSET
      statusMessage←''
      tid←⎕TID
      ⍝
    ∇

    ∇ die
      :Access Private
      :Implements Destructor
      →isEnded/0
      End
    ∇

    :Property Simple Kind,Name,Scope,SpanId,StatusCode,StatusMessage,TraceId,Tid ⍝EndTime,ParentSpanId,StartTime
    :Access Public
        ∇ r←get ipa
          r←('Kind' 'Name' 'Scope' 'SpanId' 'StatusCode' 'StatusMessage' 'TraceId' 'Tid'⍳⊂ipa.Name)⊃kind name scopeSpan.scope spanId statusCode statusMessage traceId tid
        ∇
        ∇ set ipa
          →isEnded/0
          :Select ipa.Name
          :Case 'Name'
              name←ipa.NewValue
          :Case 'Kind'
              :If ipa.NewValue∊PS.API.SpanKind.(UNSPECIFIED INTERNAL SERVER CLIENT PRODUCER CONSUMER)
                  kind←ipa.NewValue
              :EndIf
          :Case 'StatusCode'
              :If ipa.NewValue∊PS.API.SpanStatusCode.(OK ERROR)
                  statusCode←ipa.NewValue
              :EndIf
          :Case 'StatusMessage'
              :If 0=10|⎕DR ipa.NewValue
              :AndIf 1=≡ipa.NewValue
                  statusMessage←ipa.NewValue
              :EndIf
          :EndSelect
        ∇
    :EndProperty

    ∇ AddEvent args;attrm;r
      :Access Public
      ⍝ Add a Span Event
      ⍝ args, vov: EventName [attributes]
      ⍝ attributes as Key/value pairs
      args←,⊆args
      attrm←toKeyValueMatrix 1↓args
      attrm←checkAttributes attrm
      r←⎕NS''
      r.name←⊃args
      r.timeUnixNano←timeUnixNano 0
      r.attributes←toKeyValue/attrm
      ⍝r.message←val
      events,←r
    ∇

    ∇ AddLink args;attrm;r;span
      :Access Public
      ⍝ Add a link to another Span
      ⍝ args, vov: Span [attributes]
      ⍝ attributes as Key/value pairs
      args←,⊆args
      span←⊃args
      r←⎕NS''
      r.traceId←span.TraceId
      r.spanId←span.SpanId
      r.traceState←''
      attrm←toKeyValueMatrix 1↓args
      attrm←checkAttributes attrm
      r.attributes←toKeyValue/attrm
      links,←r
      ⍝
    ∇


    ∇ r←GetHttpContext
      :Access Public
     ⍝ Returns the context (HTTP header) associated with this Span.
      r←1 2⍴'traceparent'('00-',traceId,'-',spanId,'-01')
     ⍝r⍪←'tracecontext' ''
    ∇

    ∇ r←GetAttribute attr;lookup
      :Access Public
     ⍝ Get a single Attribute with the
     ⍝ key passed as argument.
     ⍝ attr, cv: attribute key
     ⍝ Return, Attribute value
      lookup←attributes[;1]⍳⊆attr
      :If lookup≤≢attributes
          r←⊃attributes[lookup;2]
      :Else
          LogError 6('Attribute [',attr,'] not found')
      :EndIf
    ∇

    ∇ SetAttributes attrs;attrm
      :Access Public
     ⍝ Sets Attributes to the Span
     ⍝ ra, nv: 2-elements key val pairs
      attrm←toKeyValueMatrix attrs
      attributes←checkAttributes attributes⍪attrm
    ∇

    ∇ End;r
⍝   Marks the end of Span execution.
      :Access Public
      →isEnded/0
      endTime←Now
      isEnded←1
     
      r←scopeSpan.⎕NS''
      r.name←name
      r.traceId←traceId
      r.parentSpanId←parentSpanId
      r.spanId←spanId
      r.startTimeUnixNano←timeUnixNano startTime
      r.endTimeUnixNano←timeUnixNano endTime
      r.kind←kind
      r.attributes←toKeyValue/attributes
      r.events←events
      r.links←links
      r.status←r.⎕NS''
      r.status.code←statusCode
      r.status.message←statusMessage
      scopeSpan.spans,←r
      ##.End ⎕THIS
    ∇

    ∇ LogError msg
      ##.LogError msg
    ∇

:EndClass
